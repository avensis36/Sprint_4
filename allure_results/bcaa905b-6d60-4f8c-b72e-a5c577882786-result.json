{"name": "test_order_flow_click_on_scooter_logo_after_order_is_confirmed[order_button0-\\u0422\\u0435\\u0441\\u0442-\\u0422\\u0435\\u0441\\u0442\\u043e\\u0432-\\u0422\\u0435\\u0441\\u0442\\u043e\\u0432\\u044b\\u0439 \\u0430\\u0434\\u0440\\u0435\\u0441-11111111111]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (612,30) because another element <div class=\"Header_Header__214zg\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:331:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:162:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:121:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:86:31", "trace": "self = <test_order_flow_leads_to_order_confirmed.TestPositiveFlow object at 0x7fb64cb0c7c0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"449fb166-f4d2-4191-b000-be66a35305e4\")>\norder_button = ('xpath', \".//button[contains(@class, 'Button_Middle__1CSJM')]\"), name = 'Тест', surname = 'Тестов', address = 'Тестовый адрес', phone = '11111111111'\n\n    @allure.feature(\"Test clicking on 'Scooter' of the positive scenario flow\")\n    @pytest.mark.parametrize('order_button, name, surname, address, phone',\n                             [[bottom_button, 'Тест', 'Тестов', 'Тестовый адрес', '11111111111'],\n                              [top_button, 'Иван', 'Иванов', 'Ул. Иванова 1', '89991112233']])\n    def test_order_flow_click_on_scooter_logo_after_order_is_confirmed(self, driver, order_button, name, surname, address, phone):\n>       self.test_order_flow_leads_to_order_confirmed(driver, order_button, name, surname, address, phone)\n\ntest/test_order_flow_leads_to_order_confirmed.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest/test_order_flow_leads_to_order_confirmed.py:24: in test_order_flow_leads_to_order_confirmed\n    scooter_main_page.click_on_order_button(order_button)\npages/scooter_main_page.py:36: in click_on_order_button\n    necessary_order_button.click()\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb64cb83a60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <button class=\\\\\"Button_But...sys.mjs:204:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:86:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (612,30) because another element <div class=\"Header_Header__214zg\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:331:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:162:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:121:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:86:31\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException"}, "steps": [{"name": "Go to url", "status": "passed", "parameters": [{"name": "base_url", "value": "'https://qa-scooter.praktikum-services.ru/'"}], "start": 1692188754682, "stop": 1692188758189}, {"name": "Make cookie pop-up disappear", "status": "passed", "start": 1692188758190, "stop": 1692188758447}, {"name": "Scroll to necessary 'Order' button", "status": "passed", "parameters": [{"name": "order_button", "value": "('xpath', \".//button[contains(@class, 'Button_Middle__1CSJM')]\")"}], "start": 1692188758447, "stop": 1692188758458}, {"name": "Click on necessary 'Order' button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (612,30) because another element <div class=\"Header_Header__214zg\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:187:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:331:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:162:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:121:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:86:31\n\n", "trace": "  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/antonermolaev/Documents/PyCharm/Sprint_4/pages/scooter_main_page.py\", line 36, in click_on_order_button\n    necessary_order_button.click()\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "order_button", "value": "('xpath', \".//button[contains(@class, 'Button_Middle__1CSJM')]\")"}], "start": 1692188758458, "stop": 1692188758474}], "parameters": [{"name": "order_button", "value": "('xpath', \".//button[contains(@class, 'Button_Middle__1CSJM')]\")"}, {"name": "name", "value": "'Тест'"}, {"name": "surname", "value": "'Тестов'"}, {"name": "address", "value": "'Тестовый адрес'"}, {"name": "phone", "value": "'11111111111'"}], "start": 1692188754681, "stop": 1692188758488, "uuid": "19226085-2155-4fff-a801-ecb5b340924a", "historyId": "cacc6ee494ae044a738b0eedc4a0c758", "testCaseId": "7779b0774b4d3609616d003e7087e3d7", "fullName": "test.test_order_flow_leads_to_order_confirmed.TestPositiveFlow#test_order_flow_click_on_scooter_logo_after_order_is_confirmed", "labels": [{"name": "feature", "value": "Test clicking on 'Scooter' of the positive scenario flow"}, {"name": "story", "value": "Test the positive scenario flow"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_order_flow_leads_to_order_confirmed"}, {"name": "subSuite", "value": "TestPositiveFlow"}, {"name": "host", "value": "MacBook-Air-Anton.local"}, {"name": "thread", "value": "40865-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_order_flow_leads_to_order_confirmed"}]}